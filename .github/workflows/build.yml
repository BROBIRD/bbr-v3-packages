name: Build Package

on:
  workflow_dispatch:
    inputs:
      release:
        type: choice
        description: Release type
        required: true
        default: none
        options:
          - none
          - pre-release
          - release


# env:
#   SCCACHE_CACHE_SIZE: 1G
#   SCCACHE_DIR: /home/runner/.cache/sccache

jobs:
    build:
      name: Build ${{ matrix.config.arch }} ${{ matrix.config.os }}-${{ matrix.config.version }} Package
      runs-on: ubuntu-22.04
      strategy:
        fail-fast: ${{ github.event.inputs.release == 'none' }}
        matrix:
          config:
            - { arch: linux/amd64|linux/arm64 , os: ubuntu/debian , version: jammy/bookwarm}
            - { arch: linux/amd64 , os: centos , version: 7}

      steps:
        - name: Checkout
          uses: actions/checkout@v3
          with:
            repository: google/bbr
            ref: v3
            path: bbr

        # - name: Get current time
        #   id: time
        #   run: |
        #     sudo timedatectl set-timezone Asia/Shanghai
        #     echo "time=$(date "+%Y-%m-%d-%H%M%S-%Z")" >> $GITHUB_OUTPUT

        - name: Get Workflow time
          id: time
          run: |
            sudo apt-get install -y jq
            sudo timedatectl set-timezone Asia/Shanghai
            echo "time=`curl -s https://api.github.com/repos/BROBIRD/bbr-v3-pkg/actions/runs/$GITHUB_RUN_ID | jq '.run_started_at' | sed 's/["|Z]//g'| sed 's/T/\\ /g' |xargs -i date -d "{} +0000" +%Y-%m-%d-%H%M%S-%Z`" >> $GITHUB_OUTPUT


        # - name: Setup dependencies
        #   run: |
        #     sudo apt-get update
        #     sudo apt-fast install -y build-essential \
        #       bc kmod cpio flex libncurses5-dev \
        #       libelf-dev libssl-dev dwarves bison debhelper \
        #       gawk openssl libssl-dev dkms libudev-dev \
        #       libpci-dev libiberty-dev autoconf \
        #       gcc-13
        
        # - name: Setup sccache
        #   uses: mozilla-actions/sccache-action@v0.0.3

        # - name: Get .config
        #   run: curl -sSL https://raw.githubusercontent.com/BROBIRD/bbr-v3-pkg/docker-test/.config > bbr/.config

        # - name: Setup cache
        #   uses: actions/cache@v3
        #   with:
        #     path: /home/runner/.cache/sccache
        #     key: sccache-${{ hashFiles('bbr/.config') }}
        
        # - name: Build
        #   working-directory: bbr
        #   run: |
        #     # Manual set deb compression to xz
        #     export KDEB_COMPRESS="xz"
        #     make prepare
        #     # Build
        #     nice make \
        #       LOCALVERSION="" \
        #       CC="sccache gcc-13" \
        #       -j`nproc` \
        #       bindeb-pkg
        #     nice make \
        #       LOCALVERSION="" \
        #       CC="sccache gcc-13" \
        #       -j`nproc` \
        #       binrpm-pkg


        # - name: Build Debian
        #   if: ${{ matrix.config.os == 'debian'}}
        #   uses: uraimo/run-on-arch-action@v2
        #   id: debian
        #   with: 
        #     arch: none
        #     distro: none
        #     base_image: --platform=${{ matrix.config.arch }} debian:${{ matrix.config.version }}-slim
        #     dockerRunArgs: |
        #       --volume "${PWD}/bbr:/root/bbr"
        #     shell: /bin/bash
        #     install: |
        #       apt-get update -q -y
        #       apt-get install -q -y build-essential \
        #         bc kmod cpio flex libncurses5-dev liblz4-tool \
        #         libelf-dev libssl-dev dwarves bison debhelper \
        #         gawk openssl libssl-dev dkms libudev-dev \
        #         libpci-dev libiberty-dev autoconf rsync rename
        #     run: |
        #       cd bbr
        #       export KDEB_COMPRESS="xz"
        #       make olddefconfig
        #       make prepare
        #       make \
        #       LOCALVERSION="" \
        #       -j`nproc` \
        #       bindeb-pkg
        #       rename -v 's/\.deb/\.debian\.deb/' ../linux-*.deb

        - name: Build DEBs
          if: ${{ matrix.config.os == 'ubuntu/debian'}}
          run: |
            sudo apt-get update -q -y
            sudo apt-fast install -q -y build-essential \
              bc kmod cpio flex libncurses5-dev liblz4-tool \
              libelf-dev libssl-dev dwarves bison debhelper \
              gawk openssl libssl-dev dkms libudev-dev \
              libpci-dev libiberty-dev autoconf rsync gcc-13 gcc-12-aarch64-linux-gnu
            sudo update-alternatives --install /usr/bin/aarch64-linux-gnu-gcc aarch64-linux-gnu-gcc /usr/bin/aarch64-linux-gnu-gcc-12 100
            sudo update-alternatives --install /usr/bin/aarch64-linux-gnu-cpp aarch64-linux-gnu-cpp /usr/bin/aarch64-linux-gnu-cpp-12 100
            sudo update-alternatives --install /usr/bin/aarch64-linux-gnu-gcc-ar aarch64-linux-gnu-gcc-ar /usr/bin/aarch64-linux-gnu-gcc-ar-12 100
            sudo update-alternatives --install /usr/bin/aarch64-linux-gnu-gcc-nm aarch64-linux-gnu-gcc-nm /usr/bin/aarch64-linux-gnu-gcc-nm-12 100
            sudo update-alternatives --install /usr/bin/aarch64-linux-gnu-gcc-ranlib aarch64-linux-gnu-gcc-ranlib /usr/bin/aarch64-linux-gnu-gcc-ranlib-12 100
            sudo update-alternatives --install /usr/bin/aarch64-linux-gnu-gcov aarch64-linux-gnu-gcov /usr/bin/aarch64-linux-gnu-gcov-12 100
            sudo update-alternatives --install /usr/bin/aarch64-linux-gnu-gcov-dump aarch64-linux-gnu-gcov-dump /usr/bin/aarch64-linux-gnu-gcov-dump-12 100
            sudo update-alternatives --install /usr/bin/aarch64-linux-gnu-gcov-tool aarch64-linux-gnu-gcov-tool /usr/bin/aarch64-linux-gnu-gcov-tool-12 100
            sudo update-alternatives --install /usr/bin/aarch64-linux-gnu-lto-dump aarch64-linux-gnu-lto-dump /usr/bin/aarch64-linux-gnu-lto-dump-12 100
            curl -sSL https://raw.githubusercontent.com/BROBIRD/bbr-v3-pkg/docker-test/amd64.config > bbr/.config
            cd bbr
            export KDEB_COMPRESS="xz"
            make olddefconfig
            make prepare
            make \
            CC="gcc-13"
            LOCALVERSION="" \
            -j`nproc` \
            bindeb-pkg
            mkdir -p ../DEBs
            mv ../linux-*.deb ../DEBs
            make distclean

            curl -sSL https://raw.githubusercontent.com/BROBIRD/bbr-v3-pkg/docker-test/arm64.config > .config
            make \
            ARCH="arm64" \
            CROSS_COMPILE="aarch64-linux-gnu-" \
            olddefconfig
            make \
            ARCH="arm64" \
            CROSS_COMPILE="aarch64-linux-gnu-" \
            prepare
            make \
            ARCH="arm64" \
            CROSS_COMPILE="aarch64-linux-gnu-" \
            LOCALVERSION="" \
            -j`nproc` \
            bindeb-pkg
            mkdir -p ../DEBs
            mv ../linux-*.deb ../DEBs


        - name: Build RPMs
          if: ${{ matrix.config.os == 'centos'}}
          uses: uraimo/run-on-arch-action@v2
          id: centos
          with: 
            arch: none
            distro: none
            base_image: --platform=${{ matrix.config.arch }} centos:${{ matrix.config.version }}
            dockerRunArgs: |
              --volume "${PWD}/bbr:/root/bbr"
            shell: /bin/bash
            install: |
              yum -y update
              yum -y groupinstall "Development Tools"
              yum -y remove gcc gdb
              yum -y install epel-release ncurses-devel hmaccalc zlib-devel \
                binutils-devel elfutils-libelf-devel \
                bc ncurses cmake openssl openssl-devel lz4 lz4-devel \
                rpm-build redhat-rpm-config asciidoc \
                perl-ExtUtils-Embed xmlto audit-libs-devel \
                elfutils-devel newt-devel python-devel
              yum -y install scl-utils centos-release-scl
              yum -y install devtoolset-11-gcc* devtoolset-11-toolchain
              source /opt/rh/devtoolset-11/enable
              echo "source /opt/rh/devtoolset-11/enable" >> /etc/bashrc
              export PATH="$PATH:/opt/rh/devtoolset-11/root/usr/bin"
            run: |
              curl -sSL https://raw.githubusercontent.com/BROBIRD/bbr-v3-pkg/docker-test/amd64.config > bbr/.config
              cd bbr
              export KDEB_COMPRESS="xz"
              source /opt/rh/devtoolset-11/enable
              make olddefconfig
              make prepare
              make \
              LOCALVERSION="" \
              -j`nproc` \
              binrpm-pkg
              mkdir -p ../RPMs
              cp ~/rpmbuild/RPMS/x86_64/*.rpm ../RPMs/


        # - name: Upload config
        #   uses: actions/upload-artifact@v3
        #   with:
        #     name: config
        #     path: bbr/.config      
        
        - name: Upload deb
          if: ${{ matrix.config.os == 'debian/ubuntu' }}
          uses: actions/upload-artifact@v3
          with:
            name: deb
            path: DEBs/linux-*.deb
        
        - name: Upload rpm
          if: ${{ matrix.config.os == 'centos'}}
          uses: actions/upload-artifact@v3
          with:
            name: rpm
            path: RPMs/*.rpm

        - name: Release
          if: ${{ github.event.inputs.release != 'none' }}
          uses: ncipollo/release-action@v1
          with:
            allowUpdates: true
            artifacts: "linux-*.deb,RPMs/*.rpm"
            prerelease: ${{ github.event.inputs.release == 'pre-release' }}
            makeLatest: ${{ github.event.inputs.release == 'release' }}
            tag: ${{ steps.time.outputs.time }}
        
