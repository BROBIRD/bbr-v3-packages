name: Build Package

on:
  workflow_dispatch:
    inputs:
      release:
        type: choice
        description: Release type
        required: true
        default: none
        options:
          - none
          - pre-release
          - release


# env:
#   SCCACHE_CACHE_SIZE: 1G
#   SCCACHE_DIR: /home/runner/.cache/sccache

jobs:
    build:
      name: Build ${{ matrix.config.arch }} ${{ matrix.config.os }}-${{ matrix.config.version }} Package
      runs-on: ubuntu-22.04
      strategy:
        fail-fast: ${{ github.event.inputs.release == 'none' }}
        matrix:
          config:
            # - { arch: linux/arm64 , os: ubuntu , version: jammy}
            # - { arch: linux/arm64 , os: debian , version: bookworm}
            - { arch: linux/amd64 , os: ubuntu , version: jammy}
            # - { arch: linux/amd64 , os: debian , version: bookworm}
            # - { arch: linux/amd64 , os: centos , version: 7}

      steps:
        - name: Checkout
          uses: actions/checkout@v3
          with:
            repository: google/bbr
            ref: v3
            path: bbr

        # - name: Get current time
        #   id: time
        #   run: |
        #     sudo timedatectl set-timezone Asia/Shanghai
        #     echo "time=$(date "+%Y-%m-%d-%H%M%S-%Z")" >> $GITHUB_OUTPUT

        # - name: Setup dependencies
        #   run: |
        #     sudo apt-get update
        #     sudo apt-fast install -y build-essential \
        #       bc kmod cpio flex libncurses5-dev \
        #       libelf-dev libssl-dev dwarves bison debhelper \
        #       gawk openssl libssl-dev dkms libudev-dev \
        #       libpci-dev libiberty-dev autoconf \
        #       gcc-13
        
        # - name: Setup sccache
        #   uses: mozilla-actions/sccache-action@v0.0.3

        - name: Get .config
          run: curl -sSL https://raw.githubusercontent.com/BROBIRD/bbr-v3-pkg/docker-test/.config > bbr/.config

        # - name: Setup cache
        #   uses: actions/cache@v3
        #   with:
        #     path: /home/runner/.cache/sccache
        #     key: sccache-${{ hashFiles('bbr/.config') }}
        
        # - name: Build
        #   working-directory: bbr
        #   run: |
        #     # Manual set deb compression to xz
        #     export KDEB_COMPRESS="xz"
        #     make prepare
        #     # Build
        #     nice make \
        #       LOCALVERSION="" \
        #       CC="sccache gcc-13" \
        #       -j`nproc` \
        #       bindeb-pkg
        #     nice make \
        #       LOCALVERSION="" \
        #       CC="sccache gcc-13" \
        #       -j`nproc` \
        #       binrpm-pkg


        - name: Build Debian
          if: ${{ matrix.config.os == 'debian'}}
          uses: uraimo/run-on-arch-action@v2
          id: debian
          with: 
            arch: none
            distro: none
            base_image: --platform=${{ matrix.config.arch }} debian:${{ matrix.config.version }}-slim
            dockerRunArgs: |
              --volume "${PWD}/bbr:/root/bbr"
            shell: /bin/bash
            install: |
              apt-get update -q -y
              apt-get install -q -y build-essential \
                bc kmod cpio flex libncurses5-dev liblz4-tool \
                libelf-dev libssl-dev dwarves bison debhelper \
                gawk openssl libssl-dev dkms libudev-dev \
                libpci-dev libiberty-dev autoconf rsync rename
            run: |
              cd bbr
              export KDEB_COMPRESS="xz"
              make prepare
              make \
              LOCALVERSION="" \
              -j`nproc` \
              bindeb-pkg
              cp ../linux-*.deb ./
              rename -v 's/\.deb/\.debian\.deb' *.deb

        - name: Build Ubuntu
          if: ${{ matrix.config.os == 'ubuntu'}}
          uses: uraimo/run-on-arch-action@v2
          id: ubuntu
          with: 
            arch: none
            distro: none
            base_image: --platform=${{ matrix.config.arch }} ubuntu:${{ matrix.config.version }}
            dockerRunArgs: |
              --volume "${PWD}/bbr:/root/bbr"
            shell: /bin/bash
            install: |
              apt-get update -q -y
              apt-get install -q -y build-essential \
                bc kmod cpio flex libncurses5-dev liblz4-tool \
                libelf-dev libssl-dev dwarves bison debhelper \
                gawk openssl libssl-dev dkms libudev-dev \
                libpci-dev libiberty-dev autoconf rsync rename
            run: |
              cd bbr
              export KDEB_COMPRESS="xz"
              make olddefconfig
              make prepare
              make \
              LOCALVERSION="" \
              -j`nproc` \
              bindeb-pkg
              cp ../linux-*.deb ./
              rename -v 's/\.deb/\.ubuntu\.deb' *.deb
            # run: |
            #   cd bbr
            #   export KDEB_COMPRESS="xz"
            #   make olddefconfig
            #   make prepare
            #   make \
            #   LOCALVERSION="" \
            #   bindeb-pkg
            #   cp ../linux-*.deb ./
            #   rename -v 's/\.deb/\.ubuntu\.deb' *.deb

        - name: Build CentOS
          if: ${{ matrix.config.os == 'centos'}}
          uses: uraimo/run-on-arch-action@v2
          id: centos
          with: 
            arch: none
            distro: none
            base_image: --platform=${{ matrix.config.arch }} centos:${{ matrix.config.version }}
            dockerRunArgs: |
              --volume "${PWD}/bbr:/root/bbr"
            shell: /bin/bash
            install: |
              yum -y update
              yum -y groupinstall "Development Tools"
              yum -y remove gcc gdb
              yum -y install epel-release ncurses-devel hmaccalc zlib-devel \
                binutils-devel elfutils-libelf-devel \
                bc ncurses cmake openssl-devel lz4 lz4-devel \
                rpm-build redhat-rpm-config asciidoc \
                perl-ExtUtils-Embed xmlto audit-libs-devel \
                elfutils-devel newt-devel python-devel \
                scl-utils centos-release-scl \
                devtoolset-11-gcc* devtoolset-11-toolchain
              scl enable devtoolset-11 bash

            run: |
              scl enable devtoolset-11 bash
              echo 'PATH=$PATH::/opt/rh/devtoolset-11/root/usr/bin' >> /etc/profile
              echo 'export PATH' >> /etc/profile
              echo 'scl enable devtoolset-11 bash' >> /etc/profile
              cd bbr
              export KDEB_COMPRESS="xz"
              make olddefconfig
              make prepare
              make \
              LOCALVERSION="" \
              -j`nproc` \
              binrpm-pkg
              mkdir -p rpmbuild
              cp -r ../rpmbuild/ ./rpmbuild


        - name: Upload config
          uses: actions/upload-artifact@v3
          with:
            name: config
            path: bbr/.config      
        
        - name: Upload deb
          if: ${{ matrix.config.os == 'debian' || matrix.config.os == 'ubuntu' }}
          uses: actions/upload-artifact@v3
          with:
            name: deb
            path: linux-*.deb
        
        - name: Upload rpm
          if: ${{ matrix.config.os == 'centos' && matrix.config.arch == 'amd64'}}
          uses: actions/upload-artifact@v3
          with:
            name: rpm
            path: rpmbuild/RPMS/x86_64/*.rpm

        - name: Release
          if: ${{ github.event.inputs.release != 'none' }}
          uses: ncipollo/release-action@v1
          with:
            artifacts: "linux-*.deb,rpmbuild/RPMS/x86_64/*.rpm"
            prerelease: ${{ github.event.inputs.release == 'pre-release' }}
            makeLatest: ${{ github.event.inputs.release == 'release' }}
            tag: $GITHUB_RUN_ID
        
